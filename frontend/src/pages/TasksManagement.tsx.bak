import React, { useState, useEffect } from 'react';
import {
  Card,
  Table,
  Button,
  Space,
  Tag,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  message,
  Tabs,
  Tooltip,
  Badge,
  Descriptions,
  Typography,
  Row,
  Col,
  Statistic,
  Progress,
  notification,
  App
} from 'antd';
import {
  PlayCircleOutlined,
  PauseCircleOutlined,
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  ReloadOutlined,
  EyeOutlined,
  HistoryOutlined,
  ClockCircleOutlined,
  CheckCircleOutlined,
  ExclamationCircleOutlined,
  LoadingOutlined
} from '@ant-design/icons';
import { useTheme } from '../contexts/ThemeContext';
import { omind_get, omind_post, omind_put, omind_del } from '../utils/base_api';

const { Option } = Select;
const { TextArea } = Input;
const { TabPane } = Tabs;
const { Text, Title } = Typography;

// 类型定义
interface ScheduledTask {
  id: number;
  task_name: string;
  task_path: string;
  task_description?: string;
  task_type?: 'system' | 'agent' | 'http'; // 任务类型：系统任务/智能体任务/HTTP任务
  agent_id?: string; // 智能体ID（当task_type为agent时使用）
  task_timeout?: number; // 任务超时时间（秒），用于HTTP任务和智能体任务
  task_interval?: number;
  task_crontab_minute?: string;
  task_crontab_hour?: string;
  task_crontab_day_of_week?: string;
  task_crontab_day_of_month?: string;
  task_crontab_month_of_year?: string;
  task_args?: string;
  task_kwargs?: string;
  task_enabled: boolean;
  task_last_run_time?: string;
  task_run_count: number;
  create_time: string;
  update_time: string;
  create_by?: string;
  update_by?: string;
}

interface CeleryTask {
  id: number;
  task_id: string;
  task_name: string;
  task_status: string;
  create_time: string;
  task_start_time?: string;
  task_complete_time?: string;
  task_result?: string;
  task_traceback?: string;
  task_retry_count: number;
}

interface TaskExecutionLog {
  id: number;
  task_name: string;
  task_schedule_time: string;
  task_execute_time: string;
  task_status: string;
  task_result?: string;
  create_time: string;
}


// 解码Unicode字符串的辅助函数
const decodeUnicodeString = (str: string): string => {
  try {
    // 先尝试解析JSON（如果是JSON字符串）
    let parsed = str;
    if (str.startsWith('"') && str.endsWith('"')) {
      parsed = JSON.parse(str);
    }
    // 替换Unicode转义序列
    return parsed.replace(/\\u[\dA-F]{4}/gi, (match: string) => {
      return String.fromCharCode(parseInt(match.replace(/\\u/g, ''), 16));
    });
  } catch (error) {
    return str;
  }
};

// API响应处理辅助函数
const handleApiResponse = async (response: Response) => {
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return await response.json();
};

const TasksManagement: React.FC = () => {
  const { isDark } = useTheme();
  const { modal } = App.useApp();
  const [activeTab, setActiveTab] = useState('scheduled');
  
  // 定时任务相关状态
  const [scheduledTasks, setScheduledTasks] = useState<ScheduledTask[]>([]);
  const [scheduledTasksLoading, setScheduledTasksLoading] = useState(false);
  const [createModalVisible, setCreateModalVisible] = useState(false);
  const [editModalVisible, setEditModalVisible] = useState(false);
  const [logModalVisible, setLogModalVisible] = useState(false);
  const [currentTask, setCurrentTask] = useState<ScheduledTask | null>(null);
  const [taskLogs, setTaskLogs] = useState<TaskExecutionLog[]>([]);
  const [taskLogsLoading, setTaskLogsLoading] = useState(false);
  
  // 任务执行记录相关状态
  const [celeryTasks, setCeleryTasks] = useState<CeleryTask[]>([]);
  const [celeryTasksLoading, setCeleryTasksLoading] = useState(false);
  const [taskDetailModalVisible, setTaskDetailModalVisible] = useState(false);
  const [currentCeleryTask, setCurrentCeleryTask] = useState<CeleryTask | null>(null);
  const [scheduledTaskDetailModalVisible, setScheduledTaskDetailModalVisible] = useState(false);
  const [statusFilter, setStatusFilter] = useState<string>('');
  const [scheduledTaskStatusFilter, setScheduledTaskStatusFilter] = useState<string>('');
  const [scheduledTaskTypeFilter, setScheduledTaskTypeFilter] = useState<string>('');
  const [enableAllLoading, setEnableAllLoading] = useState(false);
  const [disableAllLoading, setDisableAllLoading] = useState(false);
  const [selectedTaskType, setSelectedTaskType] = useState<string>('http');
  const [agents, setAgents] = useState<any[]>([]);
  
  const [form] = Form.useForm();

  // 获取定时任务列表
  const fetchScheduledTasks = async () => {
    setScheduledTasksLoading(true);
    try {
      const response = await omind_get('/api/v1/scheduled-tasks');
      const result = await response.json();
      if (result.status === 'ok' && result.data && result.data.items) {
        setScheduledTasks(result.data.items);
      } else {
        message.error(result.msg || '获取定时任务列表失败');
        setScheduledTasks([]);
      }
    } catch (error) {
      message.error('获取定时任务列表失败');
      console.error('Failed to fetch scheduled tasks:', error);
      setScheduledTasks([]);
    } finally {
      setScheduledTasksLoading(false);
    }
  };

  // 获取任务执行记录列表
  const fetchCeleryTasks = async () => {
    setCeleryTasksLoading(true);
    try {
      const response = await omind_get('/api/v1/scheduled-tasks/records');
      const result = await response.json();
      if (result.status === 'ok' && result.data && result.data.items) {
        setCeleryTasks(result.data.items);
      } else {
        message.error(result.msg || '获取执行记录列表失败');
        setCeleryTasks([]);
      }
    } catch (error) {
      message.error('获取执行记录列表失败');
      console.error('Failed to fetch celery tasks:', error);
      setCeleryTasks([]);
    } finally {
      setCeleryTasksLoading(false);
    }
  };


  // 获取智能体列表
  const fetchAgents = async () => {
    try {
      const response = await omind_get('/api/v1/agents/');
      const data = await response.json();
      setAgents(Array.isArray(data) ? data : []);
    } catch (error) {
      console.error('Failed to fetch agents:', error);
      setAgents([]);
    }
  };

  // 获取任务执行日志
  const fetchTaskLogs = async (taskId: number) => {
    setTaskLogsLoading(true);
    try {
      const response = await omind_get(`/api/v1/scheduled-tasks/${taskId}/logs`);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      const data = await response.json();
      setTaskLogs(Array.isArray(data) ? data : []);
    } catch (error) {
      message.error('获取任务执行日志失败');
      console.error('Failed to fetch task logs:', error);
      setTaskLogs([]); // 确保出错时也设置为空数组
    } finally {
      setTaskLogsLoading(false);
    }
  };

  // 创建定时任务
  const handleCreateTask = async (values: any) => {
    try {
      const response = await omind_post('/api/v1/scheduled-tasks', values);
      
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      
      message.success('创建定时任务成功');
      setCreateModalVisible(false);
      form.resetFields();
      fetchScheduledTasks();
    } catch (error) {
      message.error('创建定时任务失败');
      console.error('Failed to create scheduled task:', error);
    }
  };

  // 更新定时任务
  const handleUpdateTask = async (values: any) => {
    if (!currentTask) return;
    
    try {
      await baseFetch(`/api/v1/scheduled-tasks/${currentTask.id}`, {
        method: 'PUT',
        body: JSON.stringify(values),
      });
      message.success('更新定时任务成功');
      setEditModalVisible(false);
      form.resetFields();
      fetchScheduledTasks();
    } catch (error) {
      message.error('更新定时任务失败');
      console.error('Failed to update scheduled task:', error);
    }
  };

  // 启用/禁用任务
  const handleToggleTask = async (task: ScheduledTask) => {
    const action = task.task_enabled ? 'disable' : 'enable';
    try {
      await baseFetch(`/api/v1/scheduled-tasks/${task.id}/${action}`, {
        method: 'POST',
      });
      message.success(`${task.task_enabled ? '禁用' : '启用'}任务成功`);
      fetchScheduledTasks();
    } catch (error) {
      message.error(`${task.task_enabled ? '禁用' : '启用'}任务失败`);
      console.error(`Failed to ${action} task:`, error);
    }
  };

  // 一键启用所有任务
  const handleEnableAllTasks = () => {
    if (enableAllLoading) return; // 防止重复点击
    
    const disabledTasks = scheduledTasks.filter(task => !task.task_enabled);
    if (disabledTasks.length === 0) {
      message.info('所有任务已经是启用状态');
      return;
    }

    modal.confirm({
      title: '确认启用所有任务',
      content: (
        <div>
          <p>将启用 <strong>{disabledTasks.length}</strong> 个禁用的任务：</p>
          <ul style={{ maxHeight: '200px', overflow: 'auto', margin: '8px 0', border: '1px solid #f0f0f0', borderRadius: '4px', padding: '8px' }}>
            {disabledTasks.map(task => (
              <li key={task.id} style={{ marginBottom: '4px', padding: '2px 0' }}>
                <strong>{task.task_name}</strong> - <code style={{ fontSize: '12px', background: '#f5f5f5', padding: '1px 4px' }}>{task.task_path}</code>
              </li>
            ))}
          </ul>
          <p style={{ color: '#ff4d4f', fontWeight: 'bold', marginTop: '16px' }}>
            ⚠️ 此操作将立即启用所有选中的定时任务，请谨慎操作！
          </p>
        </div>
      ),
      okText: '确认启用',
      cancelText: '取消',
      okType: 'primary',
      width: 600,
      onOk: async () => {
        setEnableAllLoading(true);
        let successCount = 0;
        let failCount = 0;

        try {
          for (const task of disabledTasks) {
            try {
              await baseFetch(`/api/v1/scheduled-tasks/${task.id}/enable`, {
                method: 'POST',
              });
              successCount++;
            } catch (error) {
              failCount++;
              console.error(`Failed to enable task ${task.task_name}:`, error);
            }
          }

          if (successCount > 0) {
            message.success(`成功启用 ${successCount} 个任务${failCount > 0 ? `，${failCount} 个任务启用失败` : ''}`);
            await fetchScheduledTasks();
          } else {
            message.error('所有任务启用失败');
          }
        } catch (error) {
          console.error('Enable all tasks error:', error);
          message.error('批量启用任务时发生错误');
        } finally {
          setEnableAllLoading(false);
        }
      },
      onCancel: () => {
        message.info('已取消启用操作');
      },
    });
  };

  // 一键禁用所有任务
  const handleDisableAllTasks = () => {
    if (disableAllLoading) return; // 防止重复点击
    
    const enabledTasks = scheduledTasks.filter(task => task.task_enabled);
    if (enabledTasks.length === 0) {
      message.info('所有任务已经是禁用状态');
      return;
    }

    modal.confirm({
      title: '确认禁用所有任务',
      content: (
        <div>
          <p>将禁用 <strong>{enabledTasks.length}</strong> 个启用的任务：</p>
          <ul style={{ maxHeight: '200px', overflow: 'auto', margin: '8px 0', border: '1px solid #f0f0f0', borderRadius: '4px', padding: '8px' }}>
            {enabledTasks.map(task => (
              <li key={task.id} style={{ marginBottom: '4px', padding: '2px 0' }}>
                <strong>{task.task_name}</strong> - <code style={{ fontSize: '12px', background: '#f5f5f5', padding: '1px 4px' }}>{task.task_path}</code>
              </li>
            ))}
          </ul>
          <p style={{ color: '#ff4d4f', fontWeight: 'bold', marginTop: '16px' }}>
            ⚠️ 此操作将立即禁用所有选中的定时任务，请谨慎操作！
          </p>
        </div>
      ),
      okText: '确认禁用',
      cancelText: '取消',
      okType: 'danger',
      width: 600,
      onOk: async () => {
        setDisableAllLoading(true);
        let successCount = 0;
        let failCount = 0;

        try {
          for (const task of enabledTasks) {
            try {
              await baseFetch(`/api/v1/scheduled-tasks/${task.id}/disable`, {
                method: 'POST',
              });
              successCount++;
            } catch (error) {
              failCount++;
              console.error(`Failed to disable task ${task.task_name}:`, error);
            }
          }

          if (successCount > 0) {
            message.success(`成功禁用 ${successCount} 个任务${failCount > 0 ? `，${failCount} 个任务禁用失败` : ''}`);
            await fetchScheduledTasks();
          } else {
            message.error('所有任务禁用失败');
          }
        } catch (error) {
          console.error('Disable all tasks error:', error);
          message.error('批量禁用任务时发生错误');
        } finally {
          setDisableAllLoading(false);
        }
      },
      onCancel: () => {
        message.info('已取消禁用操作');
      },
    });
  };

  // 立即执行任务
  const handleRunTask = async (task: ScheduledTask) => {
    try {
      const response = await baseFetch(`/api/v1/scheduled-tasks/${task.id}/trigger`, {
        method: 'POST',
      });
      message.success(`任务已发送执行，任务ID: ${response.task_id}`);
      // 刷新执行记录列表
      if (activeTab === 'celery') {
        setTimeout(() => fetchCeleryTasks(), 1000);
      }
    } catch (error) {
      message.error('执行任务失败');
      console.error('Failed to run task:', error);
    }
  };

  // 删除任务
  const handleDeleteTask = (task: ScheduledTask) => {
    modal.confirm({
      title: '确认删除',
      content: `确定要删除任务 "${task.task_name}" 吗？`,
      onOk: async () => {
        try {
          await baseFetch(`/api/v1/scheduled-tasks/${task.id}`, {
            method: 'DELETE',
          });
          message.success('删除任务成功');
          fetchScheduledTasks();
        } catch (error) {
          message.error('删除任务失败');
          console.error('Failed to delete task:', error);
        }
      },
    });
  };

  // 查看任务执行日志
  const handleViewLogs = (task: ScheduledTask) => {
    setCurrentTask(task);
    setLogModalVisible(true);
    fetchTaskLogs(task.id);
  };

  // 查看任务执行记录详情
  const handleViewCeleryTaskDetail = (task: CeleryTask) => {
    setCurrentCeleryTask(task);
    setTaskDetailModalVisible(true);
  };

  // 查看定时任务详情
  const handleViewTaskDetail = (task: ScheduledTask) => {
    setCurrentTask(task);
    setScheduledTaskDetailModalVisible(true);
  };

  // 编辑任务
  const handleEditTask = (task: ScheduledTask) => {
    setCurrentTask(task);
    setSelectedTaskType(task.task_type || 'http'); // 设置当前任务类型
    form.setFieldsValue({
      ...task,
      task_args: task.task_args || '[]',
      task_kwargs: task.task_kwargs || '{}',
    });
    setEditModalVisible(true);
  };

  useEffect(() => {
    fetchScheduledTasks();
    fetchCeleryTasks();
    fetchAgents();
    
    // 定期刷新数据
    const interval = setInterval(() => {
      if (activeTab === 'scheduled') {
        fetchScheduledTasks();
      } else if (activeTab === 'celery') {
        fetchCeleryTasks();
      }
    }, 10000); // 每10秒刷新

    return () => clearInterval(interval);
  }, [activeTab]);

  // 定时任务表格列定义
  const scheduledTaskColumns = [
    {
      title: '任务名称',
      dataIndex: 'task_name',
      key: 'task_name',
      width: 200,
      ellipsis: true,
      render: (text: string) => (
        <Tooltip title={text}>
          <span>{text}</span>
        </Tooltip>
      ),
    },
    {
      title: '任务路径',
      dataIndex: 'task_path',
      key: 'task_path',
      width: 250,
      ellipsis: true,
      render: (text: string) => (
        <Tooltip title={text}>
          <Text code style={{ fontSize: '12px' }}>{text}</Text>
        </Tooltip>
      ),
    },
    {
      title: '任务描述',
      dataIndex: 'task_description',
      key: 'task_description',
      width: 200,
      ellipsis: true,
      render: (text: string) => (
        <Tooltip title={text}>
          <span>{text || '-'}</span>
        </Tooltip>
      ),
    },
    {
      title: '任务类型',
      dataIndex: 'task_type',
      key: 'task_type',
      width: 100,
      render: (type: string) => {
        const typeConfig = {
          system: { color: 'blue', text: '系统任务' },
          agent: { color: 'purple', text: '智能体' },
          http: { color: 'orange', text: 'HTTP任务' },
        };
        const config = typeConfig[type as keyof typeof typeConfig] || { color: 'default', text: type || '未知' };
        return <Tag color={config.color}>{config.text}</Tag>;
      },
    },
    {
      title: '调度配置',
      key: 'schedule',
      width: 150,
      render: (record: ScheduledTask) => {
        if (record.task_interval) {
          // 将秒数转换为更友好的显示
          const seconds = record.task_interval;
          let displayText = '';
          if (seconds < 60) {
            displayText = `每${seconds}秒`;
          } else if (seconds < 3600) {
            const minutes = Math.floor(seconds / 60);
            displayText = `每${minutes}分钟`;
          } else if (seconds < 86400) {
            const hours = Math.floor(seconds / 3600);
            displayText = `每${hours}小时`;
          } else {
            const days = Math.floor(seconds / 86400);
            displayText = `每${days}天`;
          }
          return (
            <Tooltip title={`间隔: ${seconds}秒`}>
              <Tag color="blue">{displayText}</Tag>
            </Tooltip>
          );
        } else {
          const cron = [
            record.task_crontab_minute || '*',
            record.task_crontab_hour || '*',
            record.task_crontab_day_of_month || '*',
            record.task_crontab_month_of_year || '*',
            record.task_crontab_day_of_week || '*'
          ].join(' ');
          return (
            <Tooltip title={`Crontab: ${cron}`}>
              <Tag color="green">定时调度</Tag>
            </Tooltip>
          );
        }
      },
    },
    {
      title: '状态',
      dataIndex: 'task_enabled',
      key: 'task_enabled',
      width: 80,
      render: (enabled: boolean) => (
        <Tag color={enabled ? 'success' : 'default'}>
          {enabled ? '启用' : '禁用'}
        </Tag>
      ),
    },
    {
      title: '执行次数',
      dataIndex: 'task_run_count',
      key: 'task_run_count',
      width: 100,
    },
    {
      title: '最后执行时间',
      dataIndex: 'task_last_run_time',
      key: 'task_last_run_time',
      width: 180,
      render: (time: string) => time ? new Date(time).toLocaleString() : '未执行',
    },
    {
      title: '操作',
      key: 'action',
      width: 300,
      render: (record: ScheduledTask) => (
        <Space size="small">
          <Tooltip title={record.task_enabled ? '禁用' : '启用'}>
            <Button
              type="text"
              size="small"
              icon={record.task_enabled ? <PauseCircleOutlined /> : <PlayCircleOutlined />}
              onClick={() => handleToggleTask(record)}
            />
          </Tooltip>
          <Tooltip title="立即执行">
            <Button
              type="text"
              size="small"
              icon={<PlayCircleOutlined />}
              onClick={() => handleRunTask(record)}
            />
          </Tooltip>
          <Tooltip title="查看详情">
            <Button
              type="text"
              size="small"
              icon={<EyeOutlined />}
              onClick={() => handleViewTaskDetail(record)}
            />
          </Tooltip>
          <Tooltip title="查看日志">
            <Button
              type="text"
              size="small"
              icon={<HistoryOutlined />}
              onClick={() => handleViewLogs(record)}
            />
          </Tooltip>
          <Tooltip title="编辑">
            <Button
              type="text"
              size="small"
              icon={<EditOutlined />}
              onClick={() => handleEditTask(record)}
            />
          </Tooltip>
          <Tooltip title="删除">
            <Button
              type="text"
              size="small"
              danger
              icon={<DeleteOutlined />}
              onClick={() => handleDeleteTask(record)}
            />
          </Tooltip>
        </Space>
      ),
    },
  ];

  // 任务执行记录表格列定义
  const celeryTaskColumns = [
    {
      title: '任务ID',
      dataIndex: 'task_id',
      key: 'task_id',
      width: 200,
      ellipsis: true,
      render: (taskId: string) => (
        <Text copyable={{ text: taskId }} style={{ fontSize: '12px' }}>
          {taskId.slice(0, 8)}...
        </Text>
      ),
    },
    {
      title: '任务名称',
      dataIndex: 'task_name',
      key: 'task_name',
      width: 200,
      ellipsis: true,
    },
    {
      title: '状态',
      dataIndex: 'task_status',
      key: 'task_status',
      width: 120,
      render: (status: string) => {
        const statusConfig = {
          PENDING: { color: 'default', text: '等待中' },
          STARTED: { color: 'processing', text: '执行中' },
          SUCCESS: { color: 'success', text: '成功' },
          FAILURE: { color: 'error', text: '失败' },
          RETRY: { color: 'warning', text: '重试中' },
          REVOKED: { color: 'default', text: '已撤销' },
        };
        const config = statusConfig[status as keyof typeof statusConfig] || { color: 'default', text: status };
        return <Tag color={config.color}>{config.text}</Tag>;
      },
    },
    {
      title: '重试次数',
      dataIndex: 'task_retry_count',
      key: 'task_retry_count',
      width: 100,
    },
    {
      title: '创建时间',
      dataIndex: 'create_time',
      key: 'create_time',
      width: 180,
      render: (time: string) => new Date(time).toLocaleString(),
    },
    {
      title: '开始时间',
      dataIndex: 'task_start_time',
      key: 'task_start_time',
      width: 180,
      render: (time: string) => time ? new Date(time).toLocaleString() : '-',
    },
    {
      title: '完成时间',
      dataIndex: 'task_complete_time',
      key: 'task_complete_time',
      width: 180,
      render: (time: string) => time ? new Date(time).toLocaleString() : '-',
    },
    {
      title: '操作',
      key: 'action',
      width: 100,
      render: (record: CeleryTask) => (
        <Button
          type="text"
          size="small"
          icon={<EyeOutlined />}
          onClick={() => handleViewCeleryTaskDetail(record)}
        >
          详情
        </Button>
      ),
    },
  ];

  // 任务执行日志表格列定义
  const taskLogColumns = [
    {
      title: '调度时间',
      dataIndex: 'task_schedule_time',
      key: 'task_schedule_time',
      width: 180,
      render: (time: string) => new Date(time).toLocaleString(),
    },
    {
      title: '执行时间',
      dataIndex: 'task_execute_time',
      key: 'task_execute_time',
      width: 180,
      render: (time: string) => new Date(time).toLocaleString(),
    },
    {
      title: '状态',
      dataIndex: 'task_status',
      key: 'task_status',
      width: 100,
      render: (status: string) => (
        <Tag color={status === 'SUCCESS' ? 'success' : 'error'}>
          {status === 'SUCCESS' ? '成功' : '失败'}
        </Tag>
      ),
    },
    {
      title: '结果',
      dataIndex: 'task_result',
      key: 'task_result',
      ellipsis: true,
      render: (result: string) => result || '-',
    },
  ];

  return (
    <div className="p-4">
      <Title level={2}>任务管理</Title>
      
      
      {/* 任务概览 */}
      <Row gutter={16} className="mb-4">
        <Col span={8}>
          <Card size="small">
            <Statistic
              title="定时任务总数"
              value={Array.isArray(scheduledTasks) ? scheduledTasks.length : 0}
              valueStyle={{ color: '#1890ff', fontSize: '16px' }}
              prefix={<ClockCircleOutlined />}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card size="small">
            <Statistic
              title="启用任务"
              value={Array.isArray(scheduledTasks) ? scheduledTasks.filter(t => t.task_enabled).length : 0}
              valueStyle={{ color: '#52c41a', fontSize: '16px' }}
              prefix={<CheckCircleOutlined />}
            />
          </Card>
        </Col>
        <Col span={8}>
          <Card size="small">
            <Statistic
              title="禁用任务"
              value={Array.isArray(scheduledTasks) ? scheduledTasks.filter(t => !t.task_enabled).length : 0}
              valueStyle={{ color: '#ff4d4f', fontSize: '16px' }}
              prefix={<ExclamationCircleOutlined />}
            />
          </Card>
        </Col>
      </Row>

      <Card>
        <Tabs activeKey={activeTab} onChange={setActiveTab}>
          <TabPane 
            tab={
              <span>
                <ClockCircleOutlined />
                定时任务
                <Badge count={Array.isArray(scheduledTasks) ? scheduledTasks.filter(t => t.task_enabled).length : 0} showZero style={{ marginLeft: 8 }} />
              </span>
            } 
            key="scheduled"
          >
            <div className="mb-4">
              <Space>
                <Button
                  type="primary"
                  icon={<PlusOutlined />}
                  onClick={() => {
                    setCreateModalVisible(true);
                    setSelectedTaskType('http'); // 设置默认类型
                  }}
                >
                  新建定时任务
                </Button>
                <Button
                  icon={<ReloadOutlined />}
                  onClick={fetchScheduledTasks}
                  loading={scheduledTasksLoading}
                >
                  刷新
                </Button>
                <Select 
                  value={scheduledTaskStatusFilter} 
                  style={{ width: 120 }} 
                  onChange={(value) => setScheduledTaskStatusFilter(value)}
                >
                  <Option value="">所有状态</Option>
                  <Option value="enabled">启用</Option>
                  <Option value="disabled">禁用</Option>
                </Select>
                <Select 
                  value={scheduledTaskTypeFilter} 
                  style={{ width: 120 }} 
                  onChange={(value) => setScheduledTaskTypeFilter(value)}
                >
                  <Option value="">所有类型</Option>
                  <Option value="system">系统任务</Option>
                  <Option value="agent">智能体</Option>
                  <Option value="http">HTTP任务</Option>
                </Select>
                <Button
                  type="default"
                  icon={enableAllLoading ? <LoadingOutlined /> : <PlayCircleOutlined />}
                  onClick={handleEnableAllTasks}
                  loading={enableAllLoading}
                  disabled={enableAllLoading || scheduledTasks.filter(t => !t.task_enabled).length === 0}
                  style={{ 
                    color: '#52c41a',
                    borderColor: '#52c41a'
                  }}
                >
                  一键启用
                </Button>
                <Button
                  type="default"
                  icon={disableAllLoading ? <LoadingOutlined /> : <PauseCircleOutlined />}
                  onClick={handleDisableAllTasks}
                  loading={disableAllLoading}
                  disabled={disableAllLoading || scheduledTasks.filter(t => t.task_enabled).length === 0}
                  style={{ 
                    color: '#ff4d4f',
                    borderColor: '#ff4d4f'
                  }}
                >
                  一键禁用
                </Button>
              </Space>
            </div>
            
            <Table
              columns={scheduledTaskColumns}
              dataSource={Array.isArray(scheduledTasks) ? 
                scheduledTasks.filter(task => {
                  // 状态筛选
                  if (scheduledTaskStatusFilter === 'enabled' && !task.task_enabled) return false;
                  if (scheduledTaskStatusFilter === 'disabled' && task.task_enabled) return false;
                  
                  // 类型筛选
                  if (scheduledTaskTypeFilter !== '' && task.task_type !== scheduledTaskTypeFilter) return false;
                  
                  return true;
                }) : []
              }
              rowKey="id"
              loading={scheduledTasksLoading}
              scroll={{ x: 1200 }}
              size="small"
            />
          </TabPane>
          
          <TabPane 
            tab={
              <span>
                <HistoryOutlined />
                执行记录
                <Badge count={Array.isArray(celeryTasks) ? celeryTasks.length : 0} showZero style={{ marginLeft: 8 }} />
              </span>
            } 
            key="celery"
          >
            <div className="mb-4">
              <Space>
                <Button
                  icon={<ReloadOutlined />}
                  onClick={fetchCeleryTasks}
                  loading={celeryTasksLoading}
                >
                  刷新
                </Button>
                <Select 
                  value={statusFilter} 
                  style={{ width: 120 }} 
                  onChange={(value) => setStatusFilter(value)}
                >
                  <Option value="">所有状态</Option>
                  <Option value="PENDING">等待中</Option>
                  <Option value="STARTED">执行中</Option>
                  <Option value="SUCCESS">成功</Option>
                  <Option value="FAILURE">失败</Option>
                </Select>
              </Space>
            </div>
            
            <Table
              columns={celeryTaskColumns}
              dataSource={Array.isArray(celeryTasks) ? 
                celeryTasks.filter(task => statusFilter === '' || task.task_status === statusFilter) : []
              }
              rowKey="id"
              loading={celeryTasksLoading}
              scroll={{ x: 1200 }}
              size="small"
            />
          </TabPane>
        </Tabs>
      </Card>

      {/* 创建/编辑定时任务弹窗 */}
      <Modal
        title={currentTask ? "编辑定时任务" : "新建定时任务"}
        open={createModalVisible || editModalVisible}
        onCancel={() => {
          setCreateModalVisible(false);
          setEditModalVisible(false);
          setCurrentTask(null);
          setSelectedTaskType('http'); // 重置任务类型
          form.resetFields();
        }}
        onOk={() => form.submit()}
        width={800}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={createModalVisible ? handleCreateTask : handleUpdateTask}
          initialValues={{
            task_enabled: true,
            task_args: '[]',
            task_kwargs: '{}',
            task_type: 'http',
            task_timeout: 120, // 默认超时时间120秒
          }}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="task_name"
                label="任务名称"
                rules={[{ required: true, message: '请输入任务名称' }]}
              >
                <Input placeholder="输入任务名称" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="task_type"
                label="任务类型"
                rules={[{ required: true, message: '请选择任务类型' }]}
              >
                <Select 
                  placeholder="选择任务类型" 
                  value={selectedTaskType}
                  onChange={(value) => {
                    setSelectedTaskType(value);
                    form.setFieldsValue({ task_type: value });
                    // 清除相关字段
                    if (value !== 'agent') {
                      form.setFieldsValue({ agent_id: undefined, task_message: undefined });
                    }
                    if (value === 'agent') {
                      form.setFieldsValue({ task_path: undefined });
                    }
                    if (value === 'system') {
                      form.setFieldsValue({ task_timeout: undefined });
                    }
                  }}
                >
                  <Option value="system">系统任务</Option>
                  <Option value="agent">智能体</Option>
                  <Option value="http">HTTP任务</Option>
                </Select>
              </Form.Item>
            </Col>
          </Row>
          
          <Form.Item name="task_description" label="任务描述">
            <TextArea rows={2} placeholder="输入任务描述" />
          </Form.Item>

          {/* 智能体任务特有配置 */}
          {selectedTaskType === 'agent' && (
            <>
              <Row gutter={16}>
                <Col span={12}>
                  <Form.Item
                    name="agent_id"
                    label="选择智能体"
                    rules={selectedTaskType === 'agent' ? 
                      [{ required: true, message: '请选择智能体' }] : []
                    }
                  >
                    <Select placeholder="选择要调用的智能体">
                      {agents.map(agent => (
                        <Option key={agent.id} value={agent.id}>
                          {agent.display_name || agent.name} ({agent.id})
                        </Option>
                      ))}
                    </Select>
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item 
                    name="task_timeout" 
                    label="超时时间（秒）"
                    rules={[
                      { type: 'number', min: 1, max: 3600, message: '超时时间范围：1-3600秒' }
                    ]}
                  >
                    <Input 
                      type="number" 
                      placeholder="默认120秒" 
                      addonAfter="秒"
                    />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={16}>
                <Col span={24}>
                  <Form.Item 
                    name="task_message" 
                    label="发送消息"
                    rules={selectedTaskType === 'agent' ? 
                      [{ required: true, message: '请输入要发送给智能体的消息' }] : []
                    }
                  >
                    <TextArea rows={3} placeholder="要发送给智能体的消息内容" />
                  </Form.Item>
                </Col>
              </Row>
            </>
          )}

          {/* HTTP任务配置 */}
          {selectedTaskType === 'http' && (
            <>
              <Row gutter={16}>
                <Col span={16}>
                  <Form.Item
                    name="task_path"
                    label="任务路径"
                    rules={[{ required: true, message: '请输入任务路径' }]}
                  >
                    <Input placeholder="如: celery_app.tasks.http_request_task" />
                  </Form.Item>
                </Col>
                <Col span={8}>
                  <Form.Item 
                    name="task_timeout" 
                    label="超时时间（秒）"
                    rules={[
                      { type: 'number', min: 1, max: 3600, message: '超时时间范围：1-3600秒' }
                    ]}
                  >
                    <Input 
                      type="number" 
                      placeholder="默认30秒" 
                      addonAfter="秒"
                    />
                  </Form.Item>
                </Col>
              </Row>
            </>
          )}

          {/* 系统任务配置 */}
          {selectedTaskType === 'system' && (
            <Row gutter={16}>
              <Col span={24}>
                <Form.Item
                  name="task_path"
                  label="任务路径"
                  rules={[{ required: true, message: '请输入任务路径' }]}
                >
                  <Input placeholder="如: celery_app.tasks.system_check_task" />
                </Form.Item>
              </Col>
            </Row>
          )}
          
          <Row gutter={16}>
            <Col span={8}>
              <Form.Item name="task_interval" label="间隔秒数">
                <Input type="number" placeholder="间隔调度（秒）" />
              </Form.Item>
            </Col>
            <Col span={16}>
              <div style={{ marginBottom: 16 }}>
                <label>Crontab 调度（可选，与间隔调度二选一）</label>
              </div>
              <Row gutter={8}>
                <Col span={5}>
                  <Form.Item name="task_crontab_minute" label="分钟">
                    <Input placeholder="*" />
                  </Form.Item>
                </Col>
                <Col span={5}>
                  <Form.Item name="task_crontab_hour" label="小时">
                    <Input placeholder="*" />
                  </Form.Item>
                </Col>
                <Col span={5}>
                  <Form.Item name="task_crontab_day_of_month" label="日">
                    <Input placeholder="*" />
                  </Form.Item>
                </Col>
                <Col span={5}>
                  <Form.Item name="task_crontab_month_of_year" label="月">
                    <Input placeholder="*" />
                  </Form.Item>
                </Col>
                <Col span={4}>
                  <Form.Item name="task_crontab_day_of_week" label="周">
                    <Input placeholder="*" />
                  </Form.Item>
                </Col>
              </Row>
            </Col>
          </Row>
          
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item name="task_args" label="任务参数（JSON数组）">
                <TextArea rows={3} placeholder='["param1", "param2"]' />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item name="task_kwargs" label="关键字参数（JSON对象）">
                <TextArea rows={3} placeholder='{"key1": "value1", "key2": "value2"}' />
              </Form.Item>
            </Col>
          </Row>
          
          <Form.Item name="task_enabled" label="启用任务" valuePropName="checked">
            <Switch />
          </Form.Item>
        </Form>
      </Modal>

      {/* 定时任务详情弹窗 */}
      <Modal
        title="定时任务详情"
        open={scheduledTaskDetailModalVisible}
        onCancel={() => setScheduledTaskDetailModalVisible(false)}
        footer={null}
        width={800}
      >
        {currentTask && (
          <Descriptions column={1} bordered size="small">
            <Descriptions.Item label="任务名称">{currentTask.task_name}</Descriptions.Item>
            <Descriptions.Item label="任务路径">
              <Text code>{currentTask.task_path}</Text>
            </Descriptions.Item>
            <Descriptions.Item label="任务类型">
              {(() => {
                const typeConfig = {
                  system: { color: 'blue', text: '系统任务' },
                  agent: { color: 'purple', text: '智能体' },
                  http: { color: 'orange', text: 'HTTP任务' },
                };
                const config = typeConfig[currentTask.task_type as keyof typeof typeConfig] || { color: 'default', text: currentTask.task_type || '未知' };
                return <Tag color={config.color}>{config.text}</Tag>;
              })()}
            </Descriptions.Item>
            {currentTask.task_type === 'agent' && currentTask.agent_id && (
              <Descriptions.Item label="智能体ID">{currentTask.agent_id}</Descriptions.Item>
            )}
            {(currentTask.task_type === 'agent' || currentTask.task_type === 'http') && currentTask.task_timeout && (
              <Descriptions.Item label="超时时间">{currentTask.task_timeout}秒</Descriptions.Item>
            )}
            <Descriptions.Item label="任务描述">{currentTask.task_description || '-'}</Descriptions.Item>
            <Descriptions.Item label="调度配置">
              {currentTask.task_interval ? (
                <span>间隔调度: {currentTask.task_interval}秒</span>
              ) : (
                <span>
                  Crontab: {[
                    currentTask.task_crontab_minute || '*',
                    currentTask.task_crontab_hour || '*',
                    currentTask.task_crontab_day_of_month || '*',
                    currentTask.task_crontab_month_of_year || '*',
                    currentTask.task_crontab_day_of_week || '*'
                  ].join(' ')}
                </span>
              )}
            </Descriptions.Item>
            <Descriptions.Item label="任务参数">
              <div style={{ maxHeight: 150, overflow: 'auto' }}>
                <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px', background: '#f5f5f5', padding: '8px', borderRadius: '4px' }}>
                  {currentTask.task_args ? (() => {
                    try {
                      const args = JSON.parse(currentTask.task_args);
                      return JSON.stringify(args.map((arg: string) => 
                        typeof arg === 'string' ? decodeUnicodeString(arg) : arg
                      ), null, 2);
                    } catch {
                      return currentTask.task_args;
                    }
                  })() : '[]'}
                </pre>
              </div>
            </Descriptions.Item>
            <Descriptions.Item label="关键字参数">
              <div style={{ maxHeight: 150, overflow: 'auto' }}>
                <pre style={{ whiteSpace: 'pre-wrap', fontSize: '12px', background: '#f5f5f5', padding: '8px', borderRadius: '4px' }}>
                  {currentTask.task_kwargs ? (() => {
                    try {
                      const kwargs = JSON.parse(currentTask.task_kwargs);
                      const decodedKwargs: any = {};
                      Object.keys(kwargs).forEach(key => {
                        const value = kwargs[key];
                        decodedKwargs[key] = typeof value === 'string' ? decodeUnicodeString(value) : value;
                      });
                      return JSON.stringify(decodedKwargs, null, 2);
                    } catch {
                      return currentTask.task_kwargs;
                    }
                  })() : '{}'}
                </pre>
              </div>
            </Descriptions.Item>
            <Descriptions.Item label="状态">
              <Tag color={currentTask.task_enabled ? 'success' : 'default'}>
                {currentTask.task_enabled ? '启用' : '禁用'}
              </Tag>
            </Descriptions.Item>
            <Descriptions.Item label="执行次数">{currentTask.task_run_count}</Descriptions.Item>
            <Descriptions.Item label="最后执行时间">
              {currentTask.task_last_run_time ? new Date(currentTask.task_last_run_time).toLocaleString() : '未执行'}
            </Descriptions.Item>
            <Descriptions.Item label="创建时间">{new Date(currentTask.create_time).toLocaleString()}</Descriptions.Item>
            <Descriptions.Item label="更新时间">{new Date(currentTask.update_time).toLocaleString()}</Descriptions.Item>
            <Descriptions.Item label="创建者">{currentTask.create_by || '-'}</Descriptions.Item>
            <Descriptions.Item label="更新者">{currentTask.update_by || '-'}</Descriptions.Item>
          </Descriptions>
        )}
      </Modal>

      {/* 任务执行日志弹窗 */}
      <Modal
        title={`任务执行日志 - ${currentTask?.task_name}`}
        open={logModalVisible}
        onCancel={() => setLogModalVisible(false)}
        footer={null}
        width={1000}
      >
        <Table
          columns={taskLogColumns}
          dataSource={Array.isArray(taskLogs) ? taskLogs : []}
          rowKey="id"
          loading={taskLogsLoading}
          size="small"
          scroll={{ x: 800 }}
        />
      </Modal>

      {/* 任务执行记录详情弹窗 */}
      <Modal
        title="执行记录详情"
        open={taskDetailModalVisible}
        onCancel={() => setTaskDetailModalVisible(false)}
        footer={null}
        width={800}
      >
        {currentCeleryTask && (
          <div>
            {/* 基本信息 */}
            <Descriptions column={2} bordered size="small" style={{ marginBottom: 16 }}>
              <Descriptions.Item label="任务ID" span={2}>
                <Text copyable={{ text: currentCeleryTask.task_id }} style={{ fontSize: '12px' }}>
                  {currentCeleryTask.task_id}
                </Text>
              </Descriptions.Item>
              <Descriptions.Item label="任务名称">{currentCeleryTask.task_name}</Descriptions.Item>
              <Descriptions.Item label="状态">
                <Tag color={
                  currentCeleryTask.task_status === 'SUCCESS' ? 'success' :
                  currentCeleryTask.task_status === 'FAILURE' ? 'error' :
                  currentCeleryTask.task_status === 'PENDING' ? 'default' :
                  'processing'
                }>
                  {currentCeleryTask.task_status === 'SUCCESS' ? '成功' :
                   currentCeleryTask.task_status === 'FAILURE' ? '失败' :
                   currentCeleryTask.task_status === 'PENDING' ? '等待中' :
                   currentCeleryTask.task_status === 'STARTED' ? '执行中' :
                   currentCeleryTask.task_status}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="执行时间">
                {currentCeleryTask.task_start_time ? new Date(currentCeleryTask.task_start_time).toLocaleString() : '-'}
              </Descriptions.Item>
              <Descriptions.Item label="完成时间">
                {currentCeleryTask.task_complete_time ? new Date(currentCeleryTask.task_complete_time).toLocaleString() : '-'}
              </Descriptions.Item>
            </Descriptions>

            {/* 执行结果 */}
            <div style={{ marginBottom: 16 }}>
              <Title level={5}>执行结果</Title>
              <div style={{ 
                maxHeight: 400, 
                overflow: 'auto', 
                border: '1px solid #d9d9d9', 
                borderRadius: '6px',
                padding: '12px',
                backgroundColor: '#fafafa'
              }}>
                <pre style={{ 
                  whiteSpace: 'pre-wrap', 
                  fontSize: '13px', 
                  margin: 0,
                  fontFamily: 'Monaco, Menlo, "Ubuntu Mono", consolas, "source-code-pro", monospace'
                }}>
                  {currentCeleryTask.task_result || '暂无执行结果'}
                </pre>
              </div>
            </div>

            {/* 错误信息（如果存在） */}
            {currentCeleryTask.task_traceback && (
              <div>
                <Title level={5} style={{ color: '#ff4d4f' }}>错误信息</Title>
                <div style={{ 
                  maxHeight: 300, 
                  overflow: 'auto', 
                  border: '1px solid #ff4d4f', 
                  borderRadius: '6px',
                  padding: '12px',
                  backgroundColor: '#fff2f0'
                }}>
                  <pre style={{ 
                    whiteSpace: 'pre-wrap', 
                    fontSize: '13px', 
                    color: '#ff4d4f',
                    margin: 0,
                    fontFamily: 'Monaco, Menlo, "Ubuntu Mono", consolas, "source-code-pro", monospace'
                  }}>
                    {currentCeleryTask.task_traceback}
                  </pre>
                </div>
              </div>
            )}
          </div>
        )}
      </Modal>
    </div>
  );
};

export default TasksManagement;